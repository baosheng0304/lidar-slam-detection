"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from sensor_driver.common_lib.logging.message.sensor_msgs.PointField import PointField as sensor_msgs_PointField

from sensor_driver.common_lib.logging.message.std_msgs.Header import Header as std_msgs_Header

class PointCloud(object):
    __slots__ = ["header", "height", "width", "fields_num", "fields", "is_bigendian", "point_step", "row_step", "data_num", "data", "is_dense"]

    IS_LITTLE_ENDIAN = False;
    def __init__(self):
        self.header = std_msgs_Header()
        self.height = 0
        self.width = 0
        self.fields_num = 0
        self.fields = []
        self.is_bigendian = False
        self.point_step = 0
        self.row_step = 0
        self.data_num = 0
        self.data = bytearray()
        self.is_dense = False

    def encode(self):
        buf = BytesIO()
        buf.write(PointCloud._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == std_msgs_Header._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">iii", self.height, self.width, self.fields_num))
        for i0 in range(self.fields_num):
            assert self.fields[i0]._get_packed_fingerprint() == sensor_msgs_PointField._get_packed_fingerprint()
            self.fields[i0]._encode_one(buf)
        buf.write(struct.pack('b', self.is_bigendian))
        buf.write(struct.pack(">iiq", self.point_step, self.row_step, self.data_num))
        buf.write(bytearray(self.data[:self.data_num]))
        buf.write(struct.pack('b', self.is_dense))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != PointCloud._get_packed_fingerprint():
            raise ValueError("Decode error")
        return PointCloud._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = PointCloud()
        self.header = std_msgs_Header._decode_one(buf)
        self.height, self.width, self.fields_num = struct.unpack(">iii", buf.read(12))
        self.fields = []
        for i0 in range(self.fields_num):
            self.fields.append(sensor_msgs_PointField._decode_one(buf))
        self.is_bigendian = bool(struct.unpack('b', buf.read(1))[0])
        self.point_step, self.row_step, self.data_num = struct.unpack(">iiq", buf.read(16))
        self.data = buf.read(self.data_num)
        self.is_dense = bool(struct.unpack('b', buf.read(1))[0])
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if PointCloud in parents: return 0
        newparents = parents + [PointCloud]
        tmphash = (0x9e56935c3ca382e+ std_msgs_Header._get_hash_recursive(newparents)+ sensor_msgs_PointField._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if PointCloud._packed_fingerprint is None:
            PointCloud._packed_fingerprint = struct.pack(">Q", PointCloud._get_hash_recursive([]))
        return PointCloud._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

