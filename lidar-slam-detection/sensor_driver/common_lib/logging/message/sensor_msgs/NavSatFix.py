"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from sensor_driver.common_lib.logging.message.sensor_msgs.NavSatStatus import NavSatStatus as sensor_msgs_NavSatStatus

from sensor_driver.common_lib.logging.message.std_msgs.Header import Header as std_msgs_Header

class NavSatFix(object):
    __slots__ = ["header", "status", "latitude", "longitude", "altitude", "position_covariance", "position_covariance_type"]

    IS_LITTLE_ENDIAN = False;
    COVARIANCE_TYPE_UNKNOWN = 0;
    COVARIANCE_TYPE_APPROXIMATED = 1;
    COVARIANCE_TYPE_DIAGONAL_KNOWN = 2;
    COVARIANCE_TYPE_KNOWN = 3;

    def __init__(self):
        self.header = std_msgs_Header()
        self.status = sensor_msgs_NavSatStatus()
        self.latitude = 0.0
        self.longitude = 0.0
        self.altitude = 0.0
        self.position_covariance = [ 0.0 for dim0 in range(64) ]
        self.position_covariance_type = 0

    def encode(self):
        buf = BytesIO()
        buf.write(NavSatFix._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == std_msgs_Header._get_packed_fingerprint()
        self.header._encode_one(buf)
        assert self.status._get_packed_fingerprint() == sensor_msgs_NavSatStatus._get_packed_fingerprint()
        self.status._encode_one(buf)
        buf.write(struct.pack(">ddd", self.latitude, self.longitude, self.altitude))
        buf.write(struct.pack('>64d', *self.position_covariance[:64]))
        buf.write(struct.pack(">b", self.position_covariance_type))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != NavSatFix._get_packed_fingerprint():
            raise ValueError("Decode error")
        return NavSatFix._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = NavSatFix()
        self.header = std_msgs_Header._decode_one(buf)
        self.status = sensor_msgs_NavSatStatus._decode_one(buf)
        self.latitude, self.longitude, self.altitude = struct.unpack(">ddd", buf.read(24))
        self.position_covariance = struct.unpack('>64d', buf.read(512))
        self.position_covariance_type = struct.unpack(">b", buf.read(1))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if NavSatFix in parents: return 0
        newparents = parents + [NavSatFix]
        tmphash = (0xa6e2262989466c08+ std_msgs_Header._get_hash_recursive(newparents)+ sensor_msgs_NavSatStatus._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if NavSatFix._packed_fingerprint is None:
            NavSatFix._packed_fingerprint = struct.pack(">Q", NavSatFix._get_hash_recursive([]))
        return NavSatFix._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

