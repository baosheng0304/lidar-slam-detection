"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class NavSatStatus(object):
    __slots__ = ["status", "service"]

    IS_LITTLE_ENDIAN = False;
    STATUS_NO_FIX_N = -1;
    STATUS_FIX_N = 0;
    STATUS_SBAS_FIX = 1;
    STATUS_GBAS_FIX = 2;
    SERVICE_GPS = 1;
    SERVICE_GLONASS = 2;
    SERVICE_COMPASS = 4;
    SERVICE_GALILEO = 8;

    def __init__(self):
        self.status = 0
        self.service = 0

    def encode(self):
        buf = BytesIO()
        buf.write(NavSatStatus._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bh", self.status, self.service))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != NavSatStatus._get_packed_fingerprint():
            raise ValueError("Decode error")
        return NavSatStatus._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = NavSatStatus()
        self.status, self.service = struct.unpack(">bh", buf.read(3))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if NavSatStatus in parents: return 0
        tmphash = (0x4a5871ba5312fd58) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if NavSatStatus._packed_fingerprint is None:
            NavSatStatus._packed_fingerprint = struct.pack(">Q", NavSatStatus._get_hash_recursive([]))
        return NavSatStatus._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

