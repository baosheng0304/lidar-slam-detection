"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from sensor_driver.common_lib.logging.message.std_msgs.Header import Header as std_msgs_Header

class Image(object):
    __slots__ = ["header", "height", "width", "encoding", "is_bigendian", "step", "size", "data"]

    IS_LITTLE_ENDIAN = False;
    def __init__(self):
        self.header = std_msgs_Header()
        self.height = 0
        self.width = 0
        self.encoding = ""
        self.is_bigendian = 0
        self.step = 0
        self.size = 0
        self.data = bytearray()

    def encode(self):
        buf = BytesIO()
        buf.write(Image._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == std_msgs_Header._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">ii", self.height, self.width))
        __encoding_encoded = self.encoding.encode('utf-8')
        buf.write(struct.pack('>I', len(__encoding_encoded)+1))
        buf.write(__encoding_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">biq", self.is_bigendian, self.step, self.size))
        buf.write(bytearray(self.data[:self.size]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Image._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Image._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = Image()
        self.header = std_msgs_Header._decode_one(buf)
        self.height, self.width = struct.unpack(">ii", buf.read(8))
        __encoding_len = struct.unpack('>I', buf.read(4))[0]
        self.encoding = buf.read(__encoding_len)[:-1].decode('utf-8', 'replace')
        self.is_bigendian, self.step, self.size = struct.unpack(">biq", buf.read(13))
        self.data = buf.read(self.size)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if Image in parents: return 0
        newparents = parents + [Image]
        tmphash = (0x77873de2583fe560+ std_msgs_Header._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if Image._packed_fingerprint is None:
            Image._packed_fingerprint = struct.pack(">Q", Image._get_hash_recursive([]))
        return Image._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

