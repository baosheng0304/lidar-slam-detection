"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from sensor_driver.common_lib.logging.message.geometry_msgs.PoseStamped import PoseStamped as geometry_msgs_PoseStamped

from sensor_driver.common_lib.logging.message.std_msgs.Header import Header as std_msgs_Header

class Path(object):
    __slots__ = ["header", "size", "poses"]

    IS_LITTLE_ENDIAN = False;
    def __init__(self):
        self.header = std_msgs_Header()
        self.size = 0
        self.poses = []

    def encode(self):
        buf = BytesIO()
        buf.write(Path._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == std_msgs_Header._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">i", self.size))
        for i0 in range(self.size):
            assert self.poses[i0]._get_packed_fingerprint() == geometry_msgs_PoseStamped._get_packed_fingerprint()
            self.poses[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Path._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Path._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = Path()
        self.header = std_msgs_Header._decode_one(buf)
        self.size = struct.unpack(">i", buf.read(4))[0]
        self.poses = []
        for i0 in range(self.size):
            self.poses.append(geometry_msgs_PoseStamped._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if Path in parents: return 0
        newparents = parents + [Path]
        tmphash = (0x68b110d35ece8c1f+ std_msgs_Header._get_hash_recursive(newparents)+ geometry_msgs_PoseStamped._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if Path._packed_fingerprint is None:
            Path._packed_fingerprint = struct.pack(">Q", Path._get_hash_recursive([]))
        return Path._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

