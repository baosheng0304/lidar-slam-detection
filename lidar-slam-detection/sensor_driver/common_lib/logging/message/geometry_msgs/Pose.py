"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from sensor_driver.common_lib.logging.message.geometry_msgs.Quaternion import Quaternion as geometry_msgs_Quaternion

from sensor_driver.common_lib.logging.message.geometry_msgs.Point import Point as geometry_msgs_Point

class Pose(object):
    __slots__ = ["position", "orientation"]

    IS_LITTLE_ENDIAN = False;
    def __init__(self):
        self.position = geometry_msgs_Point()
        self.orientation = geometry_msgs_Quaternion()

    def encode(self):
        buf = BytesIO()
        buf.write(Pose._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.position._get_packed_fingerprint() == geometry_msgs_Point._get_packed_fingerprint()
        self.position._encode_one(buf)
        assert self.orientation._get_packed_fingerprint() == geometry_msgs_Quaternion._get_packed_fingerprint()
        self.orientation._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Pose._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Pose._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = Pose()
        self.position = geometry_msgs_Point._decode_one(buf)
        self.orientation = geometry_msgs_Quaternion._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if Pose in parents: return 0
        newparents = parents + [Pose]
        tmphash = (0x7804506f738968ac+ geometry_msgs_Point._get_hash_recursive(newparents)+ geometry_msgs_Quaternion._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if Pose._packed_fingerprint is None:
            Pose._packed_fingerprint = struct.pack(">Q", Pose._get_hash_recursive([]))
        return Pose._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

